cmake_minimum_required(VERSION 3.4.1)
project(fastwel)

set(FASTWEL_PRODUCT_NUMBER 1)
set(FASTWEL_PRODUCT_VERSION 8)
set(FASTWEL_BUILD_NUMBER 0)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/3rdparty/catch2/CMake)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_C_STANDARD 90)

option(FASTWEL_TESTS "Сборка тестов" ON)
option(FASTWEL_MEMORY_LEAK "Проверка по утечке памяти" ON)

include_directories(src_c/common)
set(MSDOS_INCLUDE ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/msdos/include)

if (MSVC)
    #Надо для Catch2, т.к. в нем используются min и max из std, а Windows его переопределяет
    #https://github.com/catchorg/Catch2/issues/910
    add_definitions(-DNOMINMAX)
    set(CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS} /SUBSYSTEM:CONSOLE /IGNORE:4099")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:SSE2")
    set(CMAKE_CFLAGS "${CMAKE_CFLAGS} /arch:SSE2")
    if (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
        set(CMAKE_CFLAGS "${CMAKE_CFLAGS} /MDd /bigobj")
        add_compile_options(/MDd /bigobj)
    else ()
        add_definitions(/MT)
        add_compile_options(/bigobj)
    endif ()
    add_definitions(/wd4267)
    add_definitions(/wd4250)
    add_definitions(/wd4996)
    add_definitions(/wd4334)
elseif (CMAKE_COMPILER_IS_GNUCXX)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -std=c++11 -pedantic -Wp,-w -msse -msse2 -msse3 -fPIC -Wunused-result -Wl,--copy-dt-needed-entries -Wl,--no-as-needed ")
    set(CMAKE_CFLAGS "${CMAKE_CFLAGS} -pedantic -Wp,-w -msse -msse2 -msse3 -fPIC -Wunused-result ")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pedantic -Wp,-w -msse -msse2 -msse3 -fPIC -Wunused-result ")
    if (${ARCH} MATCHES "x86")
        set(CMAKE_LINK_LIBRARY_FLAG "${CMAKE_LINK_LIBRARY_FLAG}")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
        set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS}")
    else ()
    endif ()
else ()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -pedantic -Wp,-w -fPIC ")
    set(CMAKE_CFLAGS "${CMAKE_CFLAGS} -pedantic -Wp,-w -fPIC ")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pedantic -Wp,-w -fPIC ")
    set(CMAKE_LINK_LIBRARY_FLAG "${CMAKE_LINK_LIBRARY_FLAG} -fPIC ")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fPIC ")
    set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -fPIC ")
endif ()

if (WIN32)
    if (MSVC)
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/.build_msc_${ARCH}")
    else ()
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/.build_w64")
    endif ()
elseif (APPLE)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/.build_m64")
elseif (UNIX)
    add_definitions(-DCATCH_CONFIG_COLOUR_ANSI)
    add_definitions(-DCATCH_CONFIG_POSIX_SIGNALS)
    add_definitions(-DUNIX)
    add_definitions(-DSIZEOF_VOID_P=8)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/.build_l64")
endif ()

if (FASTWEL_MEMORY_LEAK)
    add_definitions(-DMEMORY_LEAK_DETECT)
endif ()

if (FASTWEL_TESTS)
    add_definitions(-DCATCH_CONFIG_FAST_COMPILE)
    if (WIN32)
        add_definitions(-DCATCH_CONFIG_NO_NOMINMAX)
        add_definitions(-DCATCH_CONFIG_NO_WIN32_LEAN_AND_MEAN)
        add_definitions(-DCATCH_CONFIG_COLOUR_WINDOWS)
        add_definitions(-DCATCH_CONFIG_WINDOWS_CRTDBG)
        add_definitions(-DCATCH_CONFIG_WINDOWS_SEH)
        list(APPEND SYSTEM_LIBRARIES ws2_32)
    else ()
        add_definitions(-DCATCH_CONFIG_COLOUR_ANSI)
        add_definitions(-DCATCH_CONFIG_POSIX_SIGNALS)
    endif ()

    include_directories(3rdparty/catch2/single_include/catch2)
endif ()

add_subdirectory(src_c/common)
add_subdirectory(src_c/dummy)
add_subdirectory(src_c/p55)

